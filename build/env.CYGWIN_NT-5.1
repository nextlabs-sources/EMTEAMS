
# Defining the build environment for Windows/Cygwin

#TBD: (POON) We should depreciate MSRC_ROOT.

MSCS_ROOT = Y:/

WINSDK_ROOT = O:/
MSRC_ROOT = O:/

PLATFORMSDK = 7.0
MSVC_ROOT = x:/
ifeq ($(COMPILER), VS2008)
MSVC_ROOT = y:
endif
RC  = $(WINSDK_ROOT)/bin/rc.exe

SIGNTOOL_DEV=$(WINSDK_ROOT)/Bin/signtool.exe
SIGNTOOL_DEV_ARGS=sign /f ${NLEXTERNALDIR}/buildtools/signtool/NextLabsDebug.pfx /p 123blue! /n "Nextlabs Debug"

export PATH := $(PATH):$(shell cygpath -u $(MSVC_ROOT))/Common7/IDE:$(shell cygpath -u $(MSVC_ROOT))/VC/bin

# Include path 
INCPATH += \
	$(MSVC_ROOT)/VC/include \
    $(MSVC_ROOT)/VC/atlmfc/Include

# Environment defined defaults for architecture and operating system
ifeq ($(TARGETENVARCH),)
$(info WARNING: TARGETENVARCH undefined. Defaulting to TARGETENVARCH=x86.)
	TARGETENVARCH = x86
endif

ifeq ($(TARGETENVOS), )
$(info WARNING: TARGETENVOS undefined. Defaulting to TARGETENVOS=win.)
	TARGETENVOS = win
endif

# Library path
# libjvm can be resolved by ldconfig, but other lib in java can only
# be solved by embedding path at link time.  So, here are the official
# supported library
ifeq ($(TARGETENVARCH), x86)
LIBPATH += \
   $(MSVC_ROOT)/VC/lib \
   $(MSVC_ROOT)/VC/atlmfc/Lib
else
LIBPATH += \
   $(MSVC_ROOT)/VC/lib/amd64 \
   $(MSVC_ROOT)/VC/atlmfc/Lib/amd64
endif

# Add to include and lib directories based on the platform sdk
ifeq ($(PLATFORMSDK), 7.0)
   INCPATH += \
		$(WINSDK_ROOT)/Include

   ifeq ($(TARGETENVARCH), x86)
	LIBPATH += \
	    $(WINSDK_ROOT)/Lib
   else
	LIBPATH += \
	    $(WINSDK_ROOT)/Lib/x64
   endif
else
   INCPATH += \
		$(MSVC_ROOT)/VC/PlatformSDK/Include

ifeq ($(TARGETENVARCH), x86)
	LIBPATH += \
	    $(MSVC_ROOT)/VC/PlatformSDK/Lib
   else
	LIBPATH += \
	    $(MSVC_ROOT)/VC/PlatformSDK/Lib/AMD64
   endif
endif

# Libraries
# socket : ws2_32, SID: Advapi32, CommandLine : Shell32, window: User32

LIBS +=   \
	ws2_32    \
	Advapi32  \
	Shell32   \
	User32    \
	Imagehlp  \
	secur32   \
	WtsApi32		
	

TESTLIBS += ws2_32

# Shell

SHELL = /usr/bin/sh

# Compiler 
ifeq ($(TARGETENVARCH), x86)
   CC  = $(MSVC_ROOT)/VC/bin/cl.exe
   CXX = $(MSVC_ROOT)/VC/bin/cl.exe
else
   CC  = $(MSVC_ROOT)/VC/bin/x86_amd64/cl.exe
   CXX = $(MSVC_ROOT)/VC/bin/x86_amd64/cl.exe
endif

MIDL= $(WINSDK_ROOT)/Bin/midl.exe 
CSC = $(MSCS_ROOT)/csc.exe

# LINKER
ifeq ($(TARGETENVARCH), x86)
   LD  = $(MSVC_ROOT)/VC/bin/link.exe
   STATIC_LD  = $(MSVC_ROOT)/VC/bin/lib.exe
else
   LD  = $(MSVC_ROOT)/VC/bin/x86_amd64/link.exe
   STATIC_LD  = $(MSVC_ROOT)/VC/bin/x86_amd64/lib.exe
endif

# Strip

STRIP =

# Window output bin directory
BASE = $(TARGETENVOS)_$(TARGETENVARCH)

BINBASE = bin_win32

LIBBASE = lib_win32

SRCDIR  = src

IDLGENDIR = idlgen

TESTDIR = test

# Flags definition

###################################################################################
#
# Warnings that are ignored
#
# C4100 'unreferenced formal parameter'
# C4505 'unreferenced local function has been removed'
# C4201 'nonstandard extension used : nameless struct/union'
# C4800 ''BOOL' : forcing value to bool 'true' or 'false' (performance warning)'
# C6322 'Empty _except block'
# C6993 'Code analysis ignores OpenMP constructs; analyzing single-threaded code'
###################################################################################
WARN_IGNORE = -wd4100 -wd4127 -wd4505 -wd4201 -wd4800 -wd6322 -wd6993

###################################################################################
#
# Warnings that are errors
#
# C4701 'Potentially uninitialized local variable 'X' used'
# C4702 'Unreachable Code'
# C6001 'Using uninitialized memory'
# C6057 'Buffer overrun due to number of characters/number of bytes mismatch in call to <function>'
# C6280 ''X' is allocated with 'GlobalAlloc', but deleted with 'LocalFree''
# C6386 'Buffer overrun: accessing <buffer name>, the writable size is <size1> bytes, but <size2> bytes may be written'

###################################################################################
WARN_ERROR  = -we4701 -we4702 -we6001 -we6057 -we6280 -we6386

CFLAGS     += -EHsc -nologo 
CXXFLAGS   += -EHsc -nologo 

ifeq ($(PREFAST), 1)  		
	CFLAGS     += -analyze -W4 $(WARN_IGNORE) $(WARN_ERROR)
	CXXFLAGS   += -analyze -W4 $(WARN_IGNORE) $(WARN_ERROR)
endif

LDFLAGS    += -NOLOGO -DEBUG
STATIC_LDFLAGS += -NOLOGO
ifeq ($(TARGETENVARCH), x86)
   DFLAGS     += -DWIN32 -D_WINDOWS -D_UNICODE -DUNICODE -D_X86_ -DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0502
else
   DFLAGS     += -DWIN32 -D_WINDOWS -D_UNICODE -DUNICODE -DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0502 -D_WIN64 -D_AMD64_
endif

RCFLAGS    += -D_UNICODE -DUNICODE

# MIDL.exe oddities 
# - I found if using 6.00.0347 /Win64 means compling supporting AMD64  and IA64,but in 6.0.366.1, 
#   /Win64 means compling only supporting IA64.
# - I found out the hard way that you have to specify "/x64" as additional options to the midl compiler 
#   to generate 64-bit tlbs. Simply specifying "/env x64" as the MSDN help suggests isn't enough.

ifeq ($(TARGETENVARCH), x86)
	MIDL_CFLAGS	= -char signed -win32 -Oicf -error all
else
	MIDL_CFLAGS	= -char signed -win64 -x64 -env x64 -Oicf -error all
endif

ifeq ($(BUILDTYPE), release)
	MIDL_DFLAGS	=
else
	MIDL_DFLAGS	= -D "_DEBUG"
endif

# if dynamic CRT is required, use MD.  Otherwise MT. 
ifeq ($(DYNAMICCRT), yes)
  CRTFLAG = -MD
else
  CRTFLAG = -MT
endif

ifeq ($(BUILDTYPE), release)

  ifeq ($(TARGETENVARCH), x86)
    CFLAGS   += -O2 $(CRTFLAG) -Zi
    CXXFLAGS += -O2 $(CRTFLAG) -Zi
  else
    CFLAGS   += -O2 $(CRTFLAG) -Zi /Wp64
    CXXFLAGS += -O2 $(CRTFLAG) -Zi /Wp64
  endif

  LDFLAGS  += -OPT:REF -OPT:ICF
  DFLAGS   += -DNDEBUG

else

  CFLAGS   += -Od $(CRTFLAG)d -ZI -RTC1 -GS 
  CXXFLAGS += -Od $(CRTFLAG)d -ZI -RTC1 -GS 
  DFLAGS   += -D_DEBUG

endif
# Flags for C# projects

CSFLAGS	   +=
REFERENCE  += $(addprefix -reference:, $(CSLIBS))
CSLIB      += $(addprefix -lib:, $(CSLIBPATH))
CSOUTPUT   += -out:
CSTARGET_DEBUG += -debug:full


# Subtarget i.e. DLL file defines

TARGET_PREFIX    =
TARGET_SUFFIX    =

SUBTARGET_PREFIX =
SUBTARGET_SUFFIX =

ifeq ($(TARGETENVARCH),x86)
	TARGET_SUFFIX    = 32
	SUBTARGET_SUFFIX = 32
endif

SUBTARGET_EXT    = dll

SUBTARGETFLAGS   = -DLL -DEF:$(SUBTARGET).def

SUBTARGET_LIB    = lib

SUBTARGET_DEBUG  = pdb
SUBTARGET_TARGET = -target:library


TESTSUBTARGETFLAGS   = -DLL -DEF:test/$(TESTSUBTARGET).def

# Target defines

TARGET_EXT     = .exe
TARGET_TARGET  = -target:exe


CCOUTPUTFLAG = -Fo

LDOUTPUTFLAG = -OUT:

LIBPATH += $(BUILDOUTPUTDIR)

# Flags Replacement
LIBP          = $(addprefix -LIBPATH:, $(LIBPATH))

LIBRARIES     = $(addsuffix .lib, $(LIBS))

RUNP          =

TESTLIBP      = $(addprefix -LIBPATH:, $(TESTLIBPATH))

TESTLIBRARIES = $(addsuffix .lib, $(TESTLIBS))

TESTRUNP      =



# We have those annoying vc80 and vc90 files, let's clean them
CLEANFILES   += vc80.pdb vc80.idb vc90.pdb vc90.idb
